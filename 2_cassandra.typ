#import "template/template.typ": *

#show: project.with(
  title: "Отчёт по практической работе №2",
  theme: "Создание кластера Apache Cassandra",
  department: "Математического обеспечения и стандартизации информационных технологий",
  course: "Распределенные системы управления базами данных",
  authors: (
    "Буренин А. А.",
  ),
  lecturer: "Красников С. А.",
  group: "ИКБО-07-22",
  date: datetime.today(),
  add_toc: false,
)

= Ход работы

== Создание кластера Cassandra

Для создания кластера Cassandra можно воспользоваться docker compose.
Нам необходимо создать 3 ноды, 2 в дата-центре 1 и одну в дата-центре 2.
Использование docker compose в данном случае поможет избежать использование ip-адресов,
а так же упростит поиск ошибок.

#listing(
  file: "practice/2/compose.yaml",
  caption: "Файл compose.yaml"
) <compose>

На #ref(<compose>, supplement: "листинге") представлен compose файл, в котором создаются 3 контейнера Cassandra.

Для создания и запуска кластера необходимо использовать команду `docker compose up -d`. Ниже на риснке можно увидеть результат работы этой команды

#picture(
  path: "img/2/compose_up.png",
  caption: "Результат запуска кластера"
)

== Проверка кластера

Для проверки работоспособности кластера, подключимся к одной из его нод и выполним команду `nodetool status`. На #ref(<cluster_status>, supplement: "рисунке") можно увидеть, что созданы   три ноды: две в dc-1 и одна в dc-2

#picture(
  path: "img/2/cluster_status.png",
  caption: "Состояние нод в кластере"
) <cluster_status>

#pagebreak()

== Создание пространства ключей

Создадим пространство ключей, которое будет иметь по одной реплике в dc-1 и в dc-2. На #ref(<create_keyspace>, supplement: "рисунке").

#picture(
  path: "img/2/create_keyspace.png",
  caption: [Создание пространства ключей "keyspace"]
) <create_keyspace>

== Создание таблицы users

Создадим таблицу "users" с полями id, first_name и last_name и заполним её тестовыми данными.


#picture(
  path: "img/2/create_table.png",
  caption: [Создание таблицы "users" и заполнение ее данными]
) <create_table>

== Выборка данных из другой ноды

Проверим, что данные успешно реплицировались на другую ноду, для этого подключимся cassandra-dc-2-node-1 и попробуем запросить таблицу "users". 

#picture(
  path: "img/2/select_table.png",
  caption: [Выборка данных из таблицы "users" на другой ноде],
  width: 90%
) <select_table>

= Контрольные вопросы

*Как Вы думаете, к какому типу РБД относится БД, реализованная в практической работе? Почему?*

БД, реализованная в практической работе безусловно относится к типу гомогенных автономны, так как схема базы данных совпадает на всех нодах и все ноды "знают" о существовании всех остальных. В последнем можно убедиться, рассмотрев #ref(<cluster_status>, supplement: "рисунок").

*Какой командой устанавливается образ Cassandra с помощью Docker*

Образ докер устанавливается командой `docker compose pull cassandra:latest`, однако эта команда не является обязательной. Если образа нет на машине во время выполнения команды `docker run`, он будет скачен автоматически.

= Вывод
При выполнении практической работы был создан и настроен Cassndra кластер из трёх нод в двух дата-центрах. После этого была проверена работа репликации данных.